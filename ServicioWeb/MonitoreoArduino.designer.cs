#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServicioWeb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MonitoreoArduino")]
	public partial class MonitoreoArduinoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertRegistroSensores(RegistroSensores instance);
    partial void UpdateRegistroSensores(RegistroSensores instance);
    partial void DeleteRegistroSensores(RegistroSensores instance);
    #endregion
		
		public MonitoreoArduinoDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MonitoreoArduinoConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MonitoreoArduinoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MonitoreoArduinoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MonitoreoArduinoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MonitoreoArduinoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RegistroSensores> RegistroSensores
		{
			get
			{
				return this.GetTable<RegistroSensores>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegistroSensores")]
	public partial class RegistroSensores : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _fechaRegistro;
		
		private System.Nullable<double> _temperatura;
		
		private System.Nullable<double> _humedad;
		
		private System.Nullable<double> _CO2;
		
		private System.Nullable<double> _presionAtmosferica;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfechaRegistroChanging(System.Nullable<System.DateTime> value);
    partial void OnfechaRegistroChanged();
    partial void OntemperaturaChanging(System.Nullable<double> value);
    partial void OntemperaturaChanged();
    partial void OnhumedadChanging(System.Nullable<double> value);
    partial void OnhumedadChanged();
    partial void OnCO2Changing(System.Nullable<double> value);
    partial void OnCO2Changed();
    partial void OnpresionAtmosfericaChanging(System.Nullable<double> value);
    partial void OnpresionAtmosfericaChanged();
    #endregion
		
		public RegistroSensores()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fechaRegistro", DbType="DateTime")]
		public System.Nullable<System.DateTime> fechaRegistro
		{
			get
			{
				return this._fechaRegistro;
			}
			set
			{
				if ((this._fechaRegistro != value))
				{
					this.OnfechaRegistroChanging(value);
					this.SendPropertyChanging();
					this._fechaRegistro = value;
					this.SendPropertyChanged("fechaRegistro");
					this.OnfechaRegistroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_temperatura", DbType="Float")]
		public System.Nullable<double> temperatura
		{
			get
			{
				return this._temperatura;
			}
			set
			{
				if ((this._temperatura != value))
				{
					this.OntemperaturaChanging(value);
					this.SendPropertyChanging();
					this._temperatura = value;
					this.SendPropertyChanged("temperatura");
					this.OntemperaturaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_humedad", DbType="Float")]
		public System.Nullable<double> humedad
		{
			get
			{
				return this._humedad;
			}
			set
			{
				if ((this._humedad != value))
				{
					this.OnhumedadChanging(value);
					this.SendPropertyChanging();
					this._humedad = value;
					this.SendPropertyChanged("humedad");
					this.OnhumedadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CO2", DbType="Float")]
		public System.Nullable<double> CO2
		{
			get
			{
				return this._CO2;
			}
			set
			{
				if ((this._CO2 != value))
				{
					this.OnCO2Changing(value);
					this.SendPropertyChanging();
					this._CO2 = value;
					this.SendPropertyChanged("CO2");
					this.OnCO2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presionAtmosferica", DbType="Float")]
		public System.Nullable<double> presionAtmosferica
		{
			get
			{
				return this._presionAtmosferica;
			}
			set
			{
				if ((this._presionAtmosferica != value))
				{
					this.OnpresionAtmosfericaChanging(value);
					this.SendPropertyChanging();
					this._presionAtmosferica = value;
					this.SendPropertyChanged("presionAtmosferica");
					this.OnpresionAtmosfericaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
